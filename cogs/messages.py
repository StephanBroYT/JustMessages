import io
from PIL import Image
import imageio
import disnake
from disnake.ext import commands
# from config import bot
import json

SETTINGS_FILE = 'mutes.json'

def save_settings(settings, filename=SETTINGS_FILE):
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(settings, f, ensure_ascii=False, indent=4)

def load_settings(filename=SETTINGS_FILE):
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        return {}


class predloshka(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.Cog.listener()
    async def on_message(self, message):
        if message.author == self.bot.user:
            return
        
        settings = load_settings()
        # print(settings)
        if str(message.author.id) in settings:
            await message.channel.send("–í—ã –∑–∞–º—É—á–µ–Ω—ã –≤ –±–æ—Ç–µ!")
            return
        
        if isinstance(message.channel, disnake.DMChannel):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç –∏–ª–∏ –≤–ª–æ–∂–µ–Ω–∏—è
            if message.attachments:
                attachment = message.attachments[0]
                await self.ask_conversion_type(attachment=attachment, message=message)
            elif message.content:
                await self.ask_conversion_type(message=message)

    async def ask_conversion_type(self, attachment=None, message=None):
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            msg = await message.channel.send(
                embed=disnake.Embed(title="–ü—Ä–∞–≤–∏–ª–∞:", description="–ù–µ –ø–æ—Å—Ç–∏—Ç—å –≥–æ–≤–Ω–æ"),
                components=[
                    disnake.ui.ActionRow(
                        disnake.ui.Button(
                            style=disnake.ButtonStyle.primary, 
                            label="‚úÖ–°–æ–≥–ª–∞—Å–µ–Ω"
                        )
                    )
                ]
            )
            # –û–∂–∏–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
            interaction = await self.bot.wait_for(
                "button_click", check=lambda i: i.user == message.author
            )
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
            if interaction.component.label == "‚úÖ–°–æ–≥–ª–∞—Å–µ–Ω":
                await interaction.response.edit_message(components=[
                    disnake.ui.ActionRow(
                        disnake.ui.Button(
                            style=disnake.ButtonStyle.primary,
                            label="‚úÖ–°–æ–≥–ª–∞—Å–µ–Ω",
                            disabled=True
                        )
                    )
                ])
                await self.process_message(attachment=attachment, message=message)
                
                
        except Exception as e:
            await message.channel.send(f"–û—à–∏–±–∫–∞: {e}")

    async def process_message(self, attachment=None, message=None):
        try:
            if attachment and message.content:
                description = message.content
                emb = disnake.Embed(description=description).set_author(
                    name=message.author.name, 
                    icon_url=message.author.avatar.url
                ).set_image(url=attachment.url)
            elif attachment:
                emb = disnake.Embed().set_author(
                    name=message.author.name, 
                    icon_url=message.author.avatar.url
                ).set_image(url=attachment.url)
            else:
                emb = disnake.Embed(description=message.content).set_author(
                    name=message.author.name, 
                    icon_url=message.author.avatar.url
                )
                
            await message.channel.send(embed=emb)
            msg = await message.channel.send(
                embed=disnake.Embed(title="–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ?", description="–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª"),
                components=[
                    disnake.ui.ActionRow(
                        disnake.ui.Button(
                            style=disnake.ButtonStyle.primary, 
                            label="‚úâÔ∏è–û—Ç–ø—Ä–∞–≤–∏—Ç—å?"
                        )
                    )
                ]
            )
            
            # –û–∂–∏–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
            interaction = await self.bot.wait_for(
                "button_click", check=lambda i: i.user == message.author
            )
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
            if interaction.component.label == "‚úâÔ∏è–û—Ç–ø—Ä–∞–≤–∏—Ç—å?":
                await interaction.response.edit_message(components=[
                    disnake.ui.ActionRow(
                        disnake.ui.Button(
                            style=disnake.ButtonStyle.primary,
                            label="‚úâÔ∏è–û—Ç–ø—Ä–∞–≤–∏—Ç—å?",
                            disabled=True
                        )
                    )
                ])
                
                channelsend = self.bot.get_channel(1269335033265524861)
                
                reactmessage = await channelsend.send(embed=emb)
                
                await reactmessage.add_reaction("üëç")
                await reactmessage.add_reaction("üëé")
                
                # Send a success message only here
                await message.channel.send(embed=disnake.Embed(title="–°–æ–æ–±—â–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ", color=disnake.Colour.green()))
                
        except Exception as e:
            await message.channel.send(f"–û—à–∏–±–∫–∞: {e}")

def setup(bot):
    bot.add_cog(predloshka(bot))
